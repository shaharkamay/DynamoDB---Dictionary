service: dynamodb-dictionary-api

provider:
  name: aws
  runtime: nodejs14.x
  stage: dev
  region: eu-central-1
  environment:
    DYNAMODB_TABLE_NAME: ${self:custom.dictionaryTableName}

custom:
  dictionaryTableName: dictionary

plugins:
  - serverless-iam-roles-per-function

functions:
  getWord:
    handler: api.getWord
    name: get-post
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: api/words/{word}
          method: GET
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - 'dynamodb:GetItem'
        Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_NAME}
  # createPost:
  #   handler: api.createPost
  #   name: create-post
  #   memorySize: 128 # mb
  #   timeout: 5 # seconds
  #   events:
  #     - http:
  #         path: post
  #         method: POST
  #   iamRoleStatements:
  #     - Effect: 'Allow'
  #       Action:
  #         - 'dynamodb:PutItem'
  #       Resource: !GetAtt PostsTable.Arn
  # updatePost:
  #   handler: api.updatePost
  #   name: update-post
  #   memorySize: 128 # mb
  #   timeout: 5 # seconds
  #   events:
  #     - http:
  #         path: post/{postId}
  #         method: PUT
  #   iamRoleStatements:
  #     - Effect: 'Allow'
  #       Action:
  #         - 'dynamodb:UpdateItem'
  #       Resource: !GetAtt PostsTable.Arn
  # deletePost:
  #   handler: api.deletePost
  #   name: delete-post
  #   memorySize: 128 # mb
  #   timeout: 5 # seconds
  #   events:
  #     - http:
  #         path: post/{postId}
  #         method: DELETE
  #   iamRoleStatements:
  #     - Effect: 'Allow'
  #       Action:
  #         - 'dynamodb:DeleteItem'
  #       Resource: !GetAtt PostsTable.Arn
  # getAllPosts:
  #   handler: api.getAllPosts
  #   name: get-all-posts
  #   memorySize: 128 # mb
  #   timeout: 5 # seconds
  #   events:
  #     - http:
  #         path: posts
  #         method: GET
  #   iamRoleStatements:
  #     - Effect: 'Allow'
  #       Action:
  #         - 'dynamodb:Scan'
  #       Resource: !GetAtt PostsTable.Arn
# resources:
#   Resources:
#     DictionaryTable:
#       Type: AWS::DynamoDB::Table
#       Properties:
#         TableName: ${self:custom.dictionaryTableName}
#         AttributeDefinitions:
#           - AttributeName: word
#             AttributeType: S
#         KeySchema:
#           - AttributeName: word
#             KeyType: S
#         ProvisionedThroughput:
#           ReadCapacityUnits: 1
#           WriteCapacityUnits: 1
